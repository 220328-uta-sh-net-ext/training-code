name: .NET

on: # my trigger events
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # manually trigger the workflow

env:
  WORKING_DIRECTORY: 4-DevOps/PokemonApp

jobs:
  ci:
    # We select which OS our VM's or runners to be
    runs-on: windows-latest

    steps:
    - name: Set up JDK 11 #downloading JDK for sonarcloud
      uses: actions/setup-java@v1
      with:
        java-version: 1.11
        
    - uses: actions/checkout@v3 # providing the runner with our source code
    
    - name: Cache SonarCloud packages
      uses: actions/cache@v1
      with:
        path: ~\sonar\cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar
    - name: Cache SonarCloud scanner
      id: cache-sonar-scanner
      uses: actions/cache@v1
      with:
        path: .\.sonar\scanner
        key: ${{ runner.os }}-sonar-scanner
        restore-keys: ${{ runner.os }}-sonar-scanner
    - name: Install SonarCloud scanner
      if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
      shell: powershell
      run: |
        New-Item -Path .\.sonar\scanner -ItemType Directory
        dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
    
    - name: Setup .NET # we are downloading and installing .NET SDK
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 6.0.x
    - name: Restore dependencies
      run: dotnet restore ${{env.WORKING_DIRECTORY}}/PokemonApi
    - name: Test
      run: dotnet test --verbosity normal ${{env.WORKING_DIRECTORY}} --logger trx --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover
      
    - name: Build and analyze
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      shell: powershell
      run: |
        .\.sonar\scanner\dotnet-sonarscanner begin /k:"220328-uta-sh-net-ext_training-code" /o:"220328-uta-sh-net-ext" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.opencover.reportsPaths="**/TestResults/**/coverage.opencover.xml" -d:sonar.cs.vstest.reportsPaths="**/TestResults/*.trx"
        dotnet build ${{env.WORKING_DIRECTORY}}
        .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
  
  docker-image-build:
    runs-on: ubuntu-latest
    needs: ci
    
    steps:
    - uses: actions/checkout@v3 # providing the runner with our source code
    
    - name: Docker Setup Buildx
      uses: docker/setup-buildx-action@v2.0.0
      
    - name: Docker Login
      uses: docker/login-action@v2.0.0
      with:
        # Username used to log against the Docker registry
        username: ${{secrets.DOCKERHUB_USERNAME}}
        # Password or personal access token used to log against the Docker registry
        password: ${{secrets.DOCKERHUB_PASS}}
        
    - name: Build and push Docker images
      # You may pin to the exact commit or the version.
      # uses: docker/build-push-action@e551b19e49efd4e98792db7592c17c09b89db8d8
      uses: docker/build-push-action@v3.0.0
      with:
        context: ${{env.WORKING_DIRECTORY}}
        # Path to the Dockerfile
        file: ${{env.WORKING_DIRECTORY}}/PokemonApi/Dockerfile
        # Push is a shorthand for --output=type=registry
        push: true
        # List of tags
        tags: sminseonong/pokemonapp:${{github.sha}}
        
  deploy:
    runs-on: ubuntu-latest
    needs: docker-image-build

    steps:
    - name: Azure WebApp
      uses: Azure/webapps-deploy@v2
      with:
        # Name of the Azure Web App
        app-name: pokemonapi2
        # Applies to Web Apps(Windows and Linux) and Web App Containers(linux). Multi container scenario not supported. Publish profile (*.publishsettings) file contents with Web Deploy secrets
        publish-profile: ${{secrets.AZURE_PUBLISH_PROFILE}}
        # Applies to Web App Containers only: Specify the fully qualified container image(s) name. For example, 'myregistry.azurecr.io/nginx:latest' or 'python:3.7.2-alpine/'. For multi-container scenario multiple container image names can be provided (multi-line separated)
        images: sminseonong/pokemonapp:${{github.sha}}

